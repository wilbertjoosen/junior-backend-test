services:
  web:
    image: nginx:latest # Using the default Nginx image with custom configuration.
    volumes:
      # Mount the application code for live updates
      - ./:/var/www
      # Mount the Nginx configuration file
      - ./docker/development/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      # Map port 80 inside the container to the port specified by 'NGINX_PORT' on the host machine
      - "80:80"
    environment:
      - NGINX_HOST=localhost
    networks:
      - laravel-development
    depends_on:
      php-fpm:
        condition: service_started  # Wait for php-fpm to start

  php-fpm:
    # For the php-fpm service, we will create a custom image to install the necessary PHP extensions and setup proper permissions.
    build:
      context: .
      dockerfile: ./docker/common/php-fpm/Dockerfile
      target: development
      args:
        UID: ${UID:-1000}
        GID: ${GID:-1000}
        XDEBUG_ENABLED: ${XDEBUG_ENABLED:-true}
        XDEBUG_MODE: develop,coverage,debug,profile
        XDEBUG_HOST: ${XDEBUG_HOST:-host.docker.internal}
        XDEBUG_IDE_KEY: ${XDEBUG_IDE_KEY:-DOCKER}
        XDEBUG_LOG: /dev/stdout
        XDEBUG_LOG_LEVEL: 0
    user: "${UID:-1000}:${GID:-1000}"
    volumes:
      # Mount the application code for live updates
      - ./:/var/www
    networks:
      - laravel-development
    depends_on:
        redis:
            condition: service_started  # Wait for php-fpm to start
  horizon:
      build:
          context: .
          dockerfile: ./docker/common/php-fpm/Dockerfile
          target: development
          args:
              UID: ${UID:-1000}
              GID: ${GID:-1000}
              XDEBUG_ENABLED: ${XDEBUG_ENABLED:-true}
              XDEBUG_MODE: develop,coverage,debug,profile
              XDEBUG_HOST: ${XDEBUG_HOST:-host.docker.internal}
              XDEBUG_IDE_KEY: ${XDEBUG_IDE_KEY:-DOCKER}
              XDEBUG_LOG: /dev/stdout
              XDEBUG_LOG_LEVEL: 0
      command: bash -c "php artisan horizon"
      user: "${UID:-1000}:${GID:-1000}"
      volumes:
          - ./:/var/www
      depends_on:
          - php-fpm
          - redis
      networks:
          - laravel-development
  workspace:
   # For the workspace service, we will also create a custom image to install and setup all the necessary stuff.
    build:
      context: .
      dockerfile: ./docker/development/workspace/Dockerfile
      args:
        UID: ${UID:-1000}
        GID: ${GID:-1000}
        XDEBUG_ENABLED: ${XDEBUG_ENABLED:-true}
        XDEBUG_MODE: develop,coverage,debug,profile
        XDEBUG_HOST: ${XDEBUG_HOST:-host.docker.internal}
        XDEBUG_IDE_KEY: ${XDEBUG_IDE_KEY:-DOCKER}
        XDEBUG_LOG: /dev/stdout
        XDEBUG_LOG_LEVEL: 0
    ports:
      - '${VITE_PORT:-5173}:5173'
    command: >
        bash -c "npm install && npm run dev || exec bash"
    tty: true  # Enables an interactive terminal
    stdin_open: true  # Keeps standard input open for 'docker exec'
    volumes:
      - ./:/var/www
    networks:
      - laravel-development
  soketi:
      image: quay.io/soketi/soketi:1.0-16-alpine
      environment:
          SOKETI_DEBUG: '1'
          SOKETI_METRICS_ENABLED: '1'
          SOKETI_DEFAULT_APP_ID: app-id
          SOKETI_DEFAULT_KEY: app-key
          SOKETI_DEFAULT_SECRET: app-secret
          SOKETI_DEFAULT_APP_NAME: LaravelApp
          SOKETI_DEFAULT_APP_EVENTS: 'true'
          SOKETI_DEFAULT_APP_ENABLED: 'true'
          SOKETI_DB_REDIS_HOST: 'redis'
          SOKETI_QUEUE_DRIVER: 'redis'
          SOKETI_CACHE_DRIVER: 'redis'
          SOKETI_RATE_LIMITER_DRIVER: 'redis'
          SOKETI_ADAPTER_DRIVER: 'redis'
          SOKETI_ADAPTER_REDIS_PREFIX: 'soketi'
          SOKETI_DB_REDIS_KEY_PREFIX: 'soketi'
          SOKETI_DEFAULT_APP_USER_AUTHENTICATION: 'true'
      ports:
          - "6001:6001"
      networks:
          - laravel-development
  redis:
      image: redis:alpine
      networks:
          - laravel-development
      ports:
          - "6379:6379"
  mailhog:
      image: mailhog/mailhog
      networks:
          - laravel-development
      logging:
          driver: 'none'  # disable saving logs
      ports:
          - 1025:1025 # smtp server
          - 8025:8025 # web ui

networks:
  laravel-development:
      driver: "bridge"
